{"version":3,"sources":["features/appSlice.js","Components/SidebarChannel.js","features/userSlice.js","config/firebase.js","Components/Sidebar.js","Components/ChatHeader.js","Components/Message.js","Components/Chat.js","Components/Login.js","screens/App.js","app/store.js","serviceWorker.js","index.js"],"names":["appSlice","createSlice","name","initialState","channelId","channelName","reducers","setChannelInfo","state","action","payload","actions","selectChannelId","app","selectChannelName","SidebarChannel","id","dispatch","useDispatch","onClick","className","userSlice","user","login","logout","selectUser","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","Sidebar","useSelector","useState","channels","setChannels","useEffect","collection","onSnapshot","snapShot","docs","map","doc","channel","data","prompt","add","SignalCellularAlt","fontSize","InfoOutlined","Call","Avatar","src","photo","displayName","uid","Mic","Headset","ExitToApp","titleAccess","style","cursor","signOut","ChatHeader","Notifications","EditLocationRounded","PeopleAltRounded","placeholder","SearchOutlined","SendRounded","HelpRounded","Message","message","timestamp","Date","toDate","toUTCString","Chat","console","log","input","setInput","messages","setMessages","orderBy","snapshot","AddCircle","value","onChange","e","target","preventDefault","FieldValue","serverTimestamp","type","CardGiftcard","Gif","EmojiEmotions","Login","onAuthStateChanged","authUser","photoURL","email","alt","Button","signInWithPopup","catch","err","App","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.93bddcc0.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const appSlice = createSlice({\r\n  name: \"app\",\r\n  initialState: {\r\n    channelId: null,\r\n    channelName: null,\r\n  },\r\n  reducers: {\r\n    setChannelInfo: (state, action) => {\r\n      state.channelId = action.payload.channelId;\r\n      state.channelName = action.payload.channelName;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setChannelInfo } = appSlice.actions;\r\n\r\nexport const selectChannelId = (state) => state.app.channelId;\r\nexport const selectChannelName = (state) => state.app.channelName;\r\n\r\nexport default appSlice.reducer;\r\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { setChannelInfo } from \"../features/appSlice\";\n\nconst SidebarChannel = ({ id, channelName }) => {\n  const dispatch = useDispatch();\n  return (\n    <div\n      onClick={() => dispatch(setChannelInfo({ channelId: id, channelName }))}\n      className=\"sidebarChannel\"\n    >\n      <h4>\n        <span className=\"sidebarChannel__hash\">#</span>\n        {channelName}\n      </h4>\n    </div>\n  );\n};\n\nexport default SidebarChannel;\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = (state) => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import firebase from \"firebase\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAKpwgc67ePNVC8IqaiGvSAonsB5xYII3I\",\n  authDomain: \"discord-clone-72cf6.firebaseapp.com\",\n  projectId: \"discord-clone-72cf6\",\n  storageBucket: \"discord-clone-72cf6.appspot.com\",\n  messagingSenderId: \"895733720231\",\n  appId: \"1:895733720231:web:ce372aca78630dfa596782\",\n  measurementId: \"G-BRS8JSFNQ8\",\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nexport { auth, provider };\nexport default db;\n","import React, { useEffect, useState } from \"react\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport SidebarChannel from \"./SidebarChannel\";\nimport {\n  Call,\n  ExitToApp,\n  Headset,\n  InfoOutlined,\n  // MeetingRoom,\n  Mic,\n  // Settings,\n  SignalCellularAlt,\n} from \"@material-ui/icons\";\nimport { Avatar } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"../features/userSlice\";\nimport db, { auth } from \"../config/firebase\";\nconst Sidebar = () => {\n  const user = useSelector(selectUser);\n  const [channels, setChannels] = useState([]);\n  useEffect(() => {\n    db.collection(\"channels\").onSnapshot((snapShot) => {\n      setChannels(\n        snapShot.docs.map((doc) => ({\n          id: doc.id,\n          channel: doc.data(),\n        }))\n      );\n    });\n  }, []);\n\n  const handleAddChannel = () => {\n    const channelName = prompt(\"Enter a new channel name :\");\n    if (channelName) {\n      db.collection(\"channels\").add({\n        channelName,\n      });\n    }\n  };\n  return (\n    <div className=\"sidebar\">\n      <div className=\"sidebar__top\">\n        <h3>Clever programmer </h3>\n        <ExpandMoreIcon />\n      </div>\n      <div className=\"sidebar__channels\">\n        <div className=\"sidebar__channelHeader\">\n          <div className=\"sidebar__header\">\n            <ExpandMoreIcon />\n            <h4>text channel</h4>\n          </div>\n          <AddIcon onClick={handleAddChannel} className=\"sidebar__addChannel\" />\n        </div>\n        <div className=\"sidebar__channelsList\">\n          {channels.map(({ id, channel }) => (\n            <SidebarChannel\n              key={id}\n              id={id}\n              channelName={channel.channelName}\n            />\n          ))}\n        </div>\n      </div>\n      <div className=\"sidebar__voice\">\n        <SignalCellularAlt className=\"sidebar__voice__icon\" fontSize=\"large\" />\n        <div className=\"sidebar__voice__info\">\n          <h3>Voice connected</h3>\n          <p>Stream</p>\n        </div>\n        <div className=\"sidebar__voice__icons\">\n          <InfoOutlined />\n          <Call />\n        </div>\n      </div>\n      <div className=\"sidebar__profile\">\n        <Avatar src={user.photo} />\n        <div className=\"sidebar__profile__info\">\n          <h3>{user.displayName}</h3>\n          <p>{user.uid}</p>\n        </div>\n        <div className=\"sidebar__profile__icons\">\n          <Mic />\n          <Headset />\n          <ExitToApp\n            titleAccess=\"logout\"\n            style={{ cursor: \"pointer\" }}\n            onClick={() => auth.signOut()}\n          />\n          {/*  <Settings /> */}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","import {\n  EditLocationRounded,\n  HelpRounded,\n  Notifications,\n  PeopleAltRounded,\n  SearchOutlined,\n  SendRounded,\n} from \"@material-ui/icons\";\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nconst ChatHeader = ({ channelName }) => {\n  return (\n    <div className=\"chatHeader\">\n      <div className=\"chatHeader__left\">\n        <h3>\n          <span className=\"chatHeader__left__hash\">#</span>\n          {channelName}\n        </h3>\n      </div>\n      <div className=\"chatHeader__right\">\n        <Notifications />\n        <EditLocationRounded />\n        <PeopleAltRounded />\n        <div className=\"chatHeader__right__search\">\n          <input placeholder=\"search\" />\n          <SearchOutlined />\n        </div>\n        <SendRounded />\n        <HelpRounded />\n      </div>\n    </div>\n  );\n};\n\nexport default ChatHeader;\n","import { Avatar } from \"@material-ui/core\";\nimport React from \"react\";\n\nconst Message = ({ message, user, timestamp }) => {\n  return (\n    <div className=\"message\">\n      <Avatar src={user.photo} />\n      <div className=\"message__info\">\n        <h4>\n          {user.displayName}\n          <span className=\"message__info__timestamp\">\n            {new Date(timestamp?.toDate()).toUTCString()}\n          </span>\n        </h4>\n        <p>{message}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Message;\n","import {\n  AddCircle,\n  CardGiftcard,\n  EmojiEmotions,\n  Gif,\n} from \"@material-ui/icons\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport db from \"../config/firebase\";\nimport { selectChannelId, selectChannelName } from \"../features/appSlice\";\nimport { selectUser } from \"../features/userSlice\";\nimport ChatHeader from \"./ChatHeader\";\nimport Message from \"./Message\";\nimport firebase from \"firebase\";\n\nconst Chat = () => {\n  const user = useSelector(selectUser);\n  console.log(\"user\", user);\n  const channelName = useSelector(selectChannelName);\n  const channelId = useSelector(selectChannelId);\n  const [input, setInput] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  console.log(\"messages\", messages);\n  console.log(\"channelId\", channelId);\n  useEffect(() => {\n    if (channelId) {\n      console.log(\"useEffect\");\n      db.collection(\"channels\")\n        .doc(channelId)\n        .collection(\"messages\")\n        .orderBy(\"timestamp\", \"desc\")\n        .onSnapshot((snapshot) => {\n          console.log(\"snapshot\", snapshot);\n          return setMessages(snapshot.docs.map((doc) => doc.data()));\n        });\n    }\n  }, [channelId]);\n  const sendMessage = (e) => {\n    e.preventDefault();\n    db.collection(\"channels\").doc(channelId).collection(\"messages\").add({\n      message: input,\n      user,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n\n    setInput(\"\");\n  };\n  return (\n    <div className=\"chat\">\n      <ChatHeader channelName={channelName} />\n      <div className=\"chat__messages\">\n        {messages.map((message) => (\n          <Message\n            timestamp={message.timestamp}\n            user={message.user}\n            message={message.message}\n          />\n        ))}\n      </div>\n      <div className=\"chat__input\">\n        <AddCircle fontSize=\"larger\" />\n        <form className=\"chat__input__form\">\n          <input\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder={`Message  #${channelName || \"\"}`}\n          />\n          <button\n            // disabled={!channelId}\n            onClick={sendMessage}\n            className=\"chat__inputButton\"\n            type=\"submit\"\n          >\n            Send message\n          </button>\n        </form>\n        <div className=\"chat__inputIcons\">\n          <CardGiftcard fontSize=\"larger\" />\n          <Gif fontSize=\"larger\" />\n          <EmojiEmotions fontSize=\"larger\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n","import { Button } from \"@material-ui/core\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { auth, provider } from \"../config/firebase\";\nimport { login, logout } from \"../features/userSlice\";\n\nconst Login = () => {\n  const signin = () => {\n    //google login\n    auth.signInWithPopup(provider).catch((err) => console.log(\"err\", err));\n  };\n  const dispatch = useDispatch();\n  useEffect(() => {\n    auth.onAuthStateChanged((authUser) => {\n      console.log(\"authUser\", authUser);\n      if (authUser) {\n        dispatch(\n          login({\n            uid: authUser.id || \"\",\n            photo: authUser.photoURL,\n            email: authUser.email,\n            displayName: authUser.displayName,\n          })\n        );\n      } else {\n        dispatch(logout());\n      }\n    });\n  }, [dispatch]);\n  return (\n    <div className=\"login\">\n      <div className=\"login__logo\">\n        <img\n          src=\"https://1000logos.net/wp-content/uploads/2020/10/Discord-logo.png\"\n          alt=\"discord_logo\"\n        />\n      </div>\n      <Button className=\"login__button\" onClick={signin}>\n        Sign in\n      </Button>\n    </div>\n  );\n};\n\nexport default Login;\n","import React from \"react\";\r\nimport Sidebar from \"../Components/Sidebar\";\r\nimport Chat from \"../Components/Chat\";\r\nimport { selectUser } from \"../features/userSlice\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Login from \"../Components/Login\";\r\n\r\nfunction App() {\r\n  const user = useSelector(selectUser);\r\n  return (\r\n    <div className=\"app\">\r\n      {user ? (\r\n        <>\r\n          <Sidebar />\r\n          <Chat />\r\n        </>\r\n      ) : (\r\n        <Login />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport userReducer from \"../features/userSlice\";\r\nimport appReducer from \"../features/appSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    app: appReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n//import './index.css';\r\nimport App from \"./screens/App\";\r\nimport store from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"./assets/scss/core.scss\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}